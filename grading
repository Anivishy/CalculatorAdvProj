Project 2
-------------------------------------------------------------------------------

Contributor Code Docu Adj. Score
----------- ---- ---- ---- -----
Akshai      1322         0  19/20 A
Anikait      776   73    0  19/20 A

-------------------------------------------------------------------------------

Rubric:
1. Baseline:   15
2. Creativity: +2       pemdas, steps, graphing
3. Design:     +1       nice UI
4. Clean code: +0.5
5. Document:   +0.5
   Total:      19

-------------------------------------------------------------------------------

Comments:
* GUICalculator.java
- The code is easy to read, yay.
- You could do more to simplify the code of individual buttons. Maybe derive a
  CalcButton class from JButton with a generic default addActionListener? You
  have enough repeated code that it calls out for consolidation.
- I really like the idea of showing steps.

* Translator.java
- Good job implementing order of operations and parentheses!
- Oops, there's a bug. Try: 1/2*2
- The approach is a little brittle: if you added operators with a different
  precedence (e.g. ==), you would need to add explicit new code to handle them.
- It doesn't handle errors cleanly. I often get exceptions printed on the
  console.

* Grapher.java
- I love the graphing function, what fun!

* README.md
- Nice overview of your functionality and breakdown of the main modules.

-------------------------------------------------------------------------------

Generic fine print:
a. "Code" shows the approximate lines of code contributed. This is just a line
   count of "git blame" and shouldn't be taken too seriously. Still, in many
   cases it gives quick sniff test of who did how much work.
b. "Docu" is the same thing applied to the documentation if it is in markdown.
c. "Adj." is a credit adjustment for contributors who did significantly more or
   less than than average contributor. Credit adjustments sum to 0.
d. "Score" is the final score, taken by adding the lines from the rubric and
   the credit adjustment.

1. "Baseline" means all requirements are met. This gives you a C if it's all you
   have.
2. "Creativity" is a measure of how much tought and energy you put into going
   beyond the minimum requirements.
   Points can be deducted here if some requirements are missing.
3. "Design" gives extra points for the look of the UI and overall usability.
   Points can be deducted here if there are errors or crashes.
4. "Clean code" indicates how easy the code is to read. Good code consists of
   short functions with clear names, organized in a coherent way.
   Points can be deducted here if code is redundant or especially messy.
5. "Document" gives extra points if the documentation is especially clear or
   comprehensive.
   Points can be deducted here if the documentation is missing or insufficient.
